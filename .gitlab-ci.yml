variables:
  DISCORD_WEBHOOK: 'https://discord.com/api/webhooks/1116567519004733540/4x9K_xxPeb2SvXW7aOs4lPQuBTsMh_0hVprgU374CcAIgiTu0LbBnZYTWT7ZGSo6h1fk'
  IMAGE_NAME: pinex
  
  DOCKER_REGISTRY: 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com
  AWS_DEFAULT_REGION: ap-southeast-1
  APP_NAME: pinex
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  IMAGE_TAG: latest # use latest for demo

  TAG_LATEST: 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com/$IMAGE_NAME:latest
  TAG_COMMIT: 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always

stages:
  # - test-lint
  # - build
  - deploy
  # - notification

# lint-test-job: # This job also runs in the test stage.
#   stage: test-lint # It can run at the same time as unit-test-job (in parallel).
#   image: node:18
#   script:
#     - yarn
#     - yarn lint
#   cache:
#     paths:
#       - node_modules

# publish-job:
#   stage: build
#   image:
#     name: docker:latest
#   services:
#     - docker:dind
#   before_script:
#     - apk add --no-cache python3 py3-pip
#     - pip3 install --no-cache-dir awscli
#   script:
#     - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
#     - docker build --cache-from $TAG_LATEST -t $TAG_COMMIT -t $TAG_LATEST .
#     - docker push $TAG_COMMIT
#     - docker push $TAG_LATEST
  
deploy-job:
  image: ubuntu:latest
  stage: deploy
  script:
  - >
    ssh -tt -i key.pem -o StrictHostKeyChecking=no ubuntu@54.151.229.11
    "
      sudo su;
      cd /home/ubuntu;
      aws ecr get-login-password --region ap-southeast-1;
      docker login --username AWS --password-stdin 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com;
      docker pull 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com/pinex:latest;
      docker compose up -d;
      exit;
    "
  # script:
  #   - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client wget gnupg -y )'
  #   - eval $(ssh-agent -s)
  #   - echo "$EC2_SSH_KEY1" > "key.pem"
  #   - chmod 600 key.pem
    
  #   - ssh -tt -i key.pem -o StrictHostKeyChecking=no ubuntu@54.151.229.11 "sudo su"
  #   - ssh -tt -i key.pem -o StrictHostKeyChecking=no ubuntu@54.151.229.11 "aws ecr get-login-password --region ap-southeast-1"
  #   - ssh -tt -i key.pem -o StrictHostKeyChecking=no ubuntu@54.151.229.11 "docker login --username AWS --password-stdin 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com"
  #   - ssh -tt -i key.pem -o StrictHostKeyChecking=no ubuntu@54.151.229.11 "docker pull 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com/pinex:latest"
  #   - ssh -tt -i key.pem -o StrictHostKeyChecking=no ubuntu@54.151.229.11 "docker compose up -d"
    # - ssh "sudo su"
    # - ssh "cd /home/ubuntu"
    # - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com
    # - docker pull 590774876296.dkr.ecr.ap-southeast-1.amazonaws.com/pinex:latest
    # - docker compose up -d

# success_notification:
#   stage: notification
#   script:
#     - chmod +x ./discordhook.sh;
#     - ./discordhook.sh success $DISCORD_WEBHOOK
#   when: on_success

# failure_notification:
#   stage: notification
#   script:
#     - chmod +x ./discordhook.sh
#     - ./discordhook.sh failure $DISCORD_WEBHOOK
#   when: on_failure
