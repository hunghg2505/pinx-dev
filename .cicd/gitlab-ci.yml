variables:
  AWS_REGION: $AWS_REGION

  EC2_HOST: $EC2_HOST
  EC2_USERNAME: $EC2_USERNAME
  EC2_KEY_PEM: $EC2_KEY_PEM
  EC2_ACCESS: $EC2_USERNAME@$EC2_HOST

  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  DOCKER_REGISTRY: $DOCKER_REGISTRY
  DOCKER_REPOSITORY: $DOCKER_REPOSITORY
  TAG_LATEST: $DOCKER_REPOSITORY:latest
  TAG_COMMIT: $DOCKER_REPOSITORY:$CI_COMMIT_SHORT_SHA

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always

stages:
  - test-lint
  - build
  - deploy

lint-test-job: # This job also runs in the test stage.
  stage: test-lint # It can run at the same time as unit-test-job (in parallel).
  image: node:18
  script:
    - yarn
    - yarn lint
  cache:
    paths:
      - node_modules

publish-job:
  stage: build
  image:
    name: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker build --cache-from $TAG_LATEST -t $TAG_COMMIT -t $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy-job:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client wget gnupg -y )'
    - eval $(ssh-agent -s)
    - echo "$EC2_SSH_KEY" > "key.pem"
    - chmod 600 key.pem
  script:
    - ssh -t -i key.pem -o StrictHostKeyChecking=no $EC2_ACCESS "sudo aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $DOCKER_REGISTRY"
    - ssh -t -i key.pem -o StrictHostKeyChecking=no $EC2_ACCESS "sudo docker pull $TAG_LATEST"
    - ssh -t -i key.pem -o StrictHostKeyChecking=no $EC2_ACCESS "sudo docker compose up -d"
